<!-- slider  image -->
<section [class.active-skeleton]="isLoading">
    
    <section class="slider skeleton skeleton-slider">
        <slider [imgList]="bgImgList"> </slider>
    </section>

    <!-- product list  -->
    
    <section productList>
        <!-- product list view  -->
        <div class="container" *ngIf="!smallSize">
            <div lastView>
                <div divider class="lasView">
                    <p>منتجات تصفحتها مؤخرا</p>
                </div>
                <ng-container *ngFor="let product of products">
                    <productCard *ngIf="product?.isViewBefor" [smallCard]="true" [product]="product"></productCard>
                </ng-container>
            </div>

            <div newProduct>
                <div divider>
                    <p>وصل حديث</p>
                    <span dividerLine> </span>
                    <button mat-stroked-button>عرض الكل</button>
                </div>
                <ng-container *ngFor="let product of products">
                    <productCard *ngIf="!product?.isViewBefor" [product]="product"></productCard>
                </ng-container>
            </div>

        </div>

        <!--  chip button -->
        <div chip *ngIf="smallSize">
            <button routerLinkActive="active-chip" routerLink="/" [queryParams]="{category:'new'}">وصل حديثاً</button>
            <button routerLinkActive="active-chip" routerLink="/" [queryParams]="{category:'all'}">عرض الكل</button>
            <button routerLinkActive="active-chip" routerLink="/" [queryParams]="{category:'lastView'}">
                منتجات تصفحتها مؤخراً</button>
        </div>

        <!-- Product list in small mode  -->
        <div swap *ngIf="smallSize">
            <div newProduct>
                <ng-container *ngFor="let product of products">

                    <productCard [@swap]="activeCategory == 'new' && !product?.isViewBefor? 'in':'out'"
                        [product]="product">
                    </productCard>

                    <productCard [@swap]="activeCategory == 'all' ? 'in':'out'" [product]="product"></productCard>

                    <productCard [@swap]="activeCategory == 'lastView' && product?.isViewBefor? 'in':'out'"
                        [product]="product"></productCard>

                </ng-container>
            </div>
        </div>

    </section>

</section>

@mixin productListGrid() {
    @include verticalCenter();
    justify-content: center;
    flex-wrap: wrap;
    gap: 12px;
    flex-grow: 1;
}

.slider {
    height: 50vh;
    width: 100%;
    overflow: hidden;
}

section[productList] {
    overflow: hidden;

    .container {
        @include verticalCenter();
        align-items: flex-start;
        flex-wrap: nowrap;
        justify-content: center;
        gap: 2px;
    }

    div[newProduct] {
        @include productListGrid();
    }

    div[lastView] {
        @include verticalCenter();
        flex-wrap: wrap;
        width: fit-content;
        max-width: 300px;
        justify-content: center;
        gap: 12px;
    }

    div[divider] {
        margin: 25px auto;
        height: 35px;
        width: 100%;
        @include verticalCenter();
        justify-content: space-between;

        &.lasView {
            justify-content: center;
        }

        P {
            @include stripper();
            font-size: $fontSizeBodyText;
        }

        span[dividerLine] {
            height: 1px;
            flex-grow: 1;
            margin: auto 10px;
            background-color: $dividerGray;
        }

        button {
            font-size: $fontSizeBodyText;
            color: $primaryColor;
            border-color: $primaryColor;
        }
    }

    div[chip] {
        margin: 25px auto;
        height: 35px;

        @include verticalCenter();
        justify-content: center;
        gap: 5px;

        button {
            @include iconButton();
            background-color: $startOff ;
            font-size: $fontSizeCaption ;
            padding: 8px 20px;
            border-radius: 15px;
            transition: all .3s;
        }
    }

    .active-chip {
        background-color: tomato;
        color: white;
    }
}

div[swap] {
    @include productListGrid();
}

@media only screen and (max-width: 1015px) and (min-width: 900px) {
    div[lastView] {
        max-width: 250px !important;
    }


}

@media screen  and (max-width: 1199px) {
    div[divider]{
        width: 75% !important;
    }
}

products: Products = <Products>{}

    productList: Product[] = skeletonProducts
  
    bgImgList: string[] = []
  
    activeCategory: keyof Products = 'new';
  
    isLoading: boolean = true;
    isTabletMode?: boolean;
  
  
    constructor(
      private layout: CdkLayoutService,
      private router: ActivatedRoute,
      private route: Router,
      private store: Store<{ AppStore: IAppStore }>
    ) { }
  
    ngOnInit(): void {
      // Simulate server response delay
      setTimeout(() => {
        this.store.select('AppStore').subscribe(appStore => {
          this.products = new Products(appStore.products)
          this.bgImgList = appStore.backgroundImage
          this.productList = this.products.new
        })
        this.isLoading = false
  
        this.layout.isSmallMode.pipe(
          switchMap(isTabletMode => {
            this.isTabletMode = isTabletMode
            return this.router.queryParamMap
          }))
          .subscribe(param => this.setCategoryNavigator(<keyof Products>param.get('category')))
      }, 4000);
    }
  
    private setCategoryNavigator(param: keyof Products) {
      if (!this.isTabletMode) {
        this.route.navigate(['/'])
        this.activeCategory = 'new'
      } else {
        !param ? this.route.navigate(['/'], { queryParams: { category: 'new' } }) : null
        this.activeCategory = param
      }
      this.productList = this.products[this.activeCategory]
    }
  